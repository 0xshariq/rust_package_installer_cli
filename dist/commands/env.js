/**
 * Environment command - Analyze and manage development environment
 */
import chalk from 'chalk';
import { execSync } from 'child_process';
import os from 'os';
import fs from 'fs-extra';
import path from 'path';
import boxen from 'boxen';
import gradient from 'gradient-string';
import inquirer from 'inquirer';
import { displaySuccessMessage, displayErrorMessage } from '../utils/dashboard.js';
import { detectProjectStack } from '../utils/featureInstaller.js';
/**
 * Check if a command exists
 */
function commandExists(command) {
    try {
        execSync(`which ${command}`, { stdio: 'ignore' });
        return true;
    }
    catch {
        return false;
    }
}
/**
 * Get version of a command
 */
function getCommandVersion(command, versionFlag = '--version') {
    try {
        const output = execSync(`${command} ${versionFlag}`, {
            encoding: 'utf8',
            stdio: 'pipe'
        }).toString().trim();
        return output.split('\n')[0];
    }
    catch {
        return 'Not installed';
    }
}
/**
 * Get system information
 */
function getSystemInfo() {
    return {
        platform: os.platform(),
        arch: os.arch(),
        release: os.release(),
        nodeVersion: process.version,
        uptime: Math.floor(os.uptime() / 3600) + ' hours',
        totalMemory: Math.round(os.totalmem() / 1024 / 1024 / 1024) + ' GB',
        freeMemory: Math.round(os.freemem() / 1024 / 1024 / 1024) + ' GB',
        loadAverage: os.loadavg().map(load => load.toFixed(2)).join(', ')
    };
}
/**
 * Check development tools
 */
function checkDevelopmentTools() {
    const tools = [
        { name: 'Node.js', command: 'node', flag: '--version' },
        { name: 'npm', command: 'npm', flag: '--version' },
        { name: 'yarn', command: 'yarn', flag: '--version' },
        { name: 'pnpm', command: 'pnpm', flag: '--version' },
        { name: 'Git', command: 'git', flag: '--version' },
        { name: 'Docker', command: 'docker', flag: '--version' },
        { name: 'Python', command: 'python3', flag: '--version' },
        { name: 'Rust', command: 'rustc', flag: '--version' },
        { name: 'Go', command: 'go', flag: 'version' },
        { name: 'PHP', command: 'php', flag: '--version' },
        { name: 'Ruby', command: 'ruby', flag: '--version' },
        { name: 'Java', command: 'java', flag: '--version' },
        { name: 'VS Code', command: 'code', flag: '--version' }
    ];
    return tools.map(tool => ({
        ...tool,
        installed: commandExists(tool.command),
        version: commandExists(tool.command) ? getCommandVersion(tool.command, tool.flag) : 'Not installed'
    }));
}
/**
 * Check environment variables
 */
function checkEnvironmentVariables() {
    const importantVars = [
        'PATH',
        'HOME',
        'NODE_ENV',
        'NODE_PATH',
        'NPM_CONFIG_PREFIX',
        'EDITOR',
        'SHELL',
        'TERM',
        'USER',
        'PWD'
    ];
    return importantVars.reduce((acc, varName) => {
        acc[varName] = process.env[varName] || 'Not set';
        return acc;
    }, {});
}
/**
 * Generate .env template
 */
async function generateEnvTemplate(projectPath) {
    try {
        const projectInfo = await detectProjectStack(projectPath);
        const envPath = path.join(projectPath, '.env.example');
        let envContent = `# Environment Configuration
# Generated by Package Installer CLI

# Application
NODE_ENV=development
PORT=3000

`;
        // Add framework-specific variables
        if (projectInfo.framework === 'nextjs') {
            envContent += `# Next.js
NEXTAUTH_URL=http://localhost:3000
NEXTAUTH_SECRET=your-secret-here

`;
        }
        if (projectInfo.framework === 'nestjs') {
            envContent += `# NestJS
DATABASE_URL=postgresql://user:password@localhost:5432/mydb
JWT_SECRET=your-jwt-secret

`;
        }
        // Add common service variables
        envContent += `# Database
DATABASE_URL=your-database-url

# API Keys
API_KEY=your-api-key
SECRET_KEY=your-secret-key

# External Services
REDIS_URL=redis://localhost:6379
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=your-email@gmail.com
SMTP_PASS=your-app-password

# AWS (if using AWS features)
AWS_ACCESS_KEY_ID=your-access-key
AWS_SECRET_ACCESS_KEY=your-secret-key
AWS_REGION=us-west-2

# Third-party APIs
STRIPE_SECRET_KEY=sk_test_...
STRIPE_PUBLISHABLE_KEY=pk_test_...
`;
        await fs.writeFile(envPath, envContent);
        console.log(chalk.green(`‚úÖ Generated .env.example template at ${envPath}`));
    }
    catch (error) {
        console.error(chalk.red('‚ùå Failed to generate .env template:'), error);
    }
}
/**
 * Validate existing .env file
 */
async function validateEnvFile(projectPath) {
    const envPath = path.join(projectPath, '.env');
    if (!await fs.pathExists(envPath)) {
        console.log(chalk.yellow('‚ö†Ô∏è  No .env file found'));
        const { shouldCreate } = await inquirer.prompt([
            {
                type: 'confirm',
                name: 'shouldCreate',
                message: 'Would you like to generate a .env.example template?',
                default: true
            }
        ]);
        if (shouldCreate) {
            await generateEnvTemplate(projectPath);
        }
        return;
    }
    try {
        const envContent = await fs.readFile(envPath, 'utf-8');
        const lines = envContent.split('\n').filter(line => line.trim() && !line.startsWith('#'));
        console.log(chalk.blue(`üìã Found ${lines.length} environment variables in .env`));
        // Check for common security issues
        const securityIssues = [];
        if (envContent.includes('password=password')) {
            securityIssues.push('Default password detected');
        }
        if (envContent.includes('secret=123')) {
            securityIssues.push('Weak secret detected');
        }
        if (securityIssues.length > 0) {
            console.log(chalk.red('üö® Security issues found:'));
            securityIssues.forEach(issue => console.log(chalk.red(`  ‚Ä¢ ${issue}`)));
        }
        else {
            console.log(chalk.green('‚úÖ No obvious security issues found'));
        }
    }
    catch (error) {
        console.error(chalk.red('‚ùå Failed to validate .env file:'), error);
    }
}
/**
 * Display help for environment command
 */
export function showEnvironmentHelp() {
    console.clear();
    const helpContent = boxen(gradient(['#ff6b6b', '#feca57'])('üåç Environment Command Help') + '\n\n' +
        chalk.white('Analyze and manage your development environment') + '\n\n' +
        chalk.cyan('Usage:') + '\n' +
        chalk.white('  pi env [options]') + '\n' +
        chalk.white('  pi environment [options]') + chalk.gray(' (alias)') + '\n\n' +
        chalk.cyan('Description:') + '\n' +
        chalk.white('  Comprehensive environment analysis and management tools') + '\n' +
        chalk.white('  for development setup and configuration') + '\n\n' +
        chalk.cyan('Options:') + '\n' +
        chalk.white('  --check') + chalk.gray('        Check development tools and versions') + '\n' +
        chalk.white('  --generate') + chalk.gray('     Generate .env template for project') + '\n' +
        chalk.white('  --validate') + chalk.gray('     Validate existing .env file') + '\n' +
        chalk.white('  --export') + chalk.gray('      Export environment info to file') + '\n' +
        chalk.white('  --system') + chalk.gray('      Show system information only') + '\n' +
        chalk.white('  -h, --help') + chalk.gray('     Show this help message') + '\n\n' +
        chalk.cyan('Examples:') + '\n' +
        chalk.gray('  # Interactive environment analysis') + '\n' +
        chalk.white('  pi env') + '\n\n' +
        chalk.gray('  # Check development tools') + '\n' +
        chalk.white('  pi env --check') + '\n\n' +
        chalk.gray('  # Generate .env template') + '\n' +
        chalk.white('  pi env --generate') + '\n\n' +
        chalk.gray('  # Validate .env file') + '\n' +
        chalk.white('  pi env --validate'), {
        padding: 1,
        margin: 1,
        borderStyle: 'round',
        borderColor: 'yellow'
    });
    console.log(helpContent);
}
/**
 * Main environment command function
 */
export async function environmentCommand(options = {}) {
    if (options.help || options['--help'] || options['-h']) {
        showEnvironmentHelp();
        return;
    }
    console.clear();
    const banner = boxen(gradient(['#ff6b6b', '#feca57'])('üåç Environment Analysis') + '\n\n' +
        chalk.white('Analyzing your development environment...'), {
        padding: 1,
        margin: 1,
        borderStyle: 'round',
        borderColor: 'yellow'
    });
    console.log(banner);
    const projectPath = process.cwd();
    try {
        // Handle specific options
        if (options.generate) {
            await generateEnvTemplate(projectPath);
            return;
        }
        if (options.validate) {
            await validateEnvFile(projectPath);
            return;
        }
        if (options.check) {
            await performEnvironmentCheck();
            return;
        }
        if (options.system) {
            displaySystemInfo();
            return;
        }
        if (options.export) {
            await exportEnvironmentInfo();
            return;
        }
        // Interactive menu
        const choices = [
            { name: 'üîç Check Development Tools', value: 'check' },
            { name: 'üíæ Generate .env Template', value: 'generate' },
            { name: '‚úÖ Validate .env File', value: 'validate' },
            { name: 'üñ•Ô∏è  Show System Information', value: 'system' },
            { name: 'üìÑ Export Environment Info', value: 'export' }
        ];
        const { action } = await inquirer.prompt([
            {
                type: 'list',
                name: 'action',
                message: 'What would you like to do?',
                choices,
                pageSize: 10
            }
        ]);
        switch (action) {
            case 'check':
                await performEnvironmentCheck();
                break;
            case 'generate':
                await generateEnvTemplate(projectPath);
                break;
            case 'validate':
                await validateEnvFile(projectPath);
                break;
            case 'system':
                displaySystemInfo();
                break;
            case 'export':
                await exportEnvironmentInfo();
                break;
        }
    }
    catch (error) {
        displayErrorMessage('Environment analysis failed', ['An error occurred while analyzing the environment', String(error)]);
    }
}
/**
 * Perform comprehensive environment check
 */
async function performEnvironmentCheck() {
    console.log(chalk.blue('\nüîç Checking development tools...\n'));
    const tools = checkDevelopmentTools();
    const installed = tools.filter(tool => tool.installed);
    const missing = tools.filter(tool => !tool.installed);
    // Display installed tools
    if (installed.length > 0) {
        console.log(chalk.green('‚úÖ Installed Tools:'));
        installed.forEach(tool => {
            const version = tool.version.length > 50 ? tool.version.substring(0, 50) + '...' : tool.version;
            console.log(chalk.white(`  ${tool.name}: `) + chalk.gray(version));
        });
    }
    // Display missing tools
    if (missing.length > 0) {
        console.log(chalk.yellow('\n‚ö†Ô∏è  Missing Tools:'));
        missing.forEach(tool => {
            console.log(chalk.red(`  ${tool.name}: Not installed`));
        });
    }
    // Check environment variables
    console.log(chalk.blue('\nüîç Checking environment variables...\n'));
    const envVars = checkEnvironmentVariables();
    Object.entries(envVars).forEach(([key, value]) => {
        const displayValue = value.length > 50 ? value.substring(0, 50) + '...' : value;
        console.log(chalk.white(`  ${key}: `) + chalk.gray(displayValue));
    });
}
/**
 * Display system information
 */
function displaySystemInfo() {
    console.log(chalk.blue('\nüñ•Ô∏è  System Information:\n'));
    const systemInfo = getSystemInfo();
    Object.entries(systemInfo).forEach(([key, value]) => {
        const displayKey = key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase());
        console.log(chalk.white(`  ${displayKey}: `) + chalk.gray(value));
    });
}
/**
 * Export environment information to file
 */
async function exportEnvironmentInfo() {
    try {
        const timestamp = new Date().toISOString().split('T')[0];
        const filename = `environment-info-${timestamp}.json`;
        const info = {
            timestamp: new Date().toISOString(),
            system: getSystemInfo(),
            tools: checkDevelopmentTools(),
            environment: checkEnvironmentVariables()
        };
        await fs.writeJson(filename, info, { spaces: 2 });
        displaySuccessMessage('Environment info exported', [`Saved to ${filename}`, 'File contains system, tools, and environment data']);
    }
    catch (error) {
        console.error(chalk.red('‚ùå Failed to export environment info:'), error);
    }
}
/**
 * Gather comprehensive environment information
 */
async function gatherEnvironmentInfo(options) {
    const envInfo = {
        system: {},
        nodejs: {},
        packageManagers: {},
        languages: {},
        tools: {},
        git: {},
        paths: {}
    };
    // System information
    envInfo.system = {
        platform: os.platform(),
        arch: os.arch(),
        release: os.release(),
        hostname: os.hostname(),
        uptime: os.uptime(),
        totalMemory: os.totalmem(),
        freeMemory: os.freemem(),
        cpus: os.cpus().length,
        homeDir: os.homedir(),
        tmpDir: os.tmpdir()
    };
    // Node.js information
    envInfo.nodejs = await checkNodejs();
    // Package managers
    envInfo.packageManagers = await checkPackageManagers();
    // Programming languages
    envInfo.languages = await checkLanguages();
    // Development tools
    envInfo.tools = await checkDevelopmentTools();
    // Git information
    envInfo.git = await checkGit();
    // Environment paths
    if (options.paths) {
        envInfo.paths = getEnvironmentPaths();
    }
    return envInfo;
}
/**
 * Check Node.js installation and details
 */
async function checkNodejs() {
    try {
        const version = process.version;
        const execPath = process.execPath;
        const platform = process.platform;
        const arch = process.arch;
        // Get npm version bundled with Node.js
        let npmVersion = 'Not found';
        try {
            npmVersion = execSync('npm --version', { encoding: 'utf8' }).trim();
        }
        catch (error) {
            // npm not available
        }
        return {
            version,
            execPath,
            platform,
            arch,
            bundledNpm: npmVersion,
            available: true
        };
    }
    catch (error) {
        return { available: false, error: error instanceof Error ? error.message : 'Unknown error' };
    }
}
/**
 * Check package manager availability and versions
 */
async function checkPackageManagers() {
    const managers = ['npm', 'pnpm', 'yarn', 'bun'];
    const results = {};
    for (const manager of managers) {
        try {
            const version = execSync(`${manager} --version`, {
                encoding: 'utf8',
                timeout: 5000
            }).trim();
            let location = 'Unknown';
            try {
                location = execSync(`which ${manager}`, { encoding: 'utf8' }).trim();
            }
            catch (error) {
                // which command failed
            }
            results[manager] = {
                available: true,
                version,
                location
            };
        }
        catch (error) {
            results[manager] = {
                available: false,
                error: 'Not installed'
            };
        }
    }
    return results;
}
/**
 * Check programming language installations
 */
async function checkLanguages() {
    const languages = [
        { name: 'python', commands: ['python3 --version', 'python --version'] },
        { name: 'rust', commands: ['rustc --version'] },
        { name: 'go', commands: ['go version'] },
        { name: 'java', commands: ['java -version'] },
        { name: 'php', commands: ['php --version'] },
        { name: 'ruby', commands: ['ruby --version'] },
        { name: 'deno', commands: ['deno --version'] }
    ];
    const results = {};
    for (const lang of languages) {
        let found = false;
        for (const command of lang.commands) {
            try {
                const output = execSync(command, {
                    encoding: 'utf8',
                    timeout: 5000,
                    stdio: ['ignore', 'pipe', 'pipe']
                }).trim();
                results[lang.name] = {
                    available: true,
                    version: output.split('\n')[0],
                    command: command.split(' ')[0]
                };
                found = true;
                break;
            }
            catch (error) {
                // Try next command
            }
        }
        if (!found) {
            results[lang.name] = {
                available: false,
                error: 'Not installed'
            };
        }
    }
    return results;
}
/**
 * Check Git configuration
 */
async function checkGit() {
    try {
        const version = execSync('git --version', { encoding: 'utf8' }).trim();
        let userName = 'Not configured';
        let userEmail = 'Not configured';
        try {
            userName = execSync('git config --global user.name', { encoding: 'utf8' }).trim();
        }
        catch (error) {
            // Not configured
        }
        try {
            userEmail = execSync('git config --global user.email', { encoding: 'utf8' }).trim();
        }
        catch (error) {
            // Not configured
        }
        return {
            available: true,
            version,
            userName,
            userEmail
        };
    }
    catch (error) {
        return {
            available: false,
            error: 'Git not installed'
        };
    }
}
/**
 * Get environment paths
 */
function getEnvironmentPaths() {
    return {
        PATH: process.env.PATH?.split(path.delimiter) || [],
        NODE_PATH: process.env.NODE_PATH || 'Not set',
        NPM_CONFIG_PREFIX: process.env.NPM_CONFIG_PREFIX || 'Not set',
        CARGO_HOME: process.env.CARGO_HOME || 'Not set',
        GOPATH: process.env.GOPATH || 'Not set',
        PYTHONPATH: process.env.PYTHONPATH || 'Not set'
    };
}
/**
 * Display minimal environment information
 */
function displayMinimalEnvInfo(envInfo) {
    console.log(chalk.hex('#00d2d3')('üíª SYSTEM'));
    console.log(`${chalk.white('OS:')} ${envInfo.system.platform} ${envInfo.system.arch}`);
    console.log(`${chalk.white('Node.js:')} ${envInfo.nodejs.version || 'Not available'}`);
    const availableManagers = Object.entries(envInfo.packageManagers)
        .filter(([_, info]) => info.available)
        .map(([name, info]) => `${name}@${info.version}`)
        .join(', ');
    console.log(`${chalk.white('Package Managers:')} ${availableManagers || 'None'}`);
}
/**
 * Display full environment information
 */
function displayFullEnvInfo(envInfo, options) {
    const Table = require('cli-table3');
    // System Information
    console.log(chalk.hex('#00d2d3')('üíª SYSTEM INFORMATION\n'));
    const systemTable = new Table({
        head: [chalk.hex('#00d2d3')('Property'), chalk.hex('#10ac84')('Value')],
        colWidths: [20, 50],
        style: { head: [], border: ['cyan'] }
    });
    systemTable.push(['Platform', `${envInfo.system.platform} ${envInfo.system.arch}`], ['Release', envInfo.system.release], ['Hostname', envInfo.system.hostname], ['CPUs', envInfo.system.cpus], ['Memory', `${(envInfo.system.totalMemory / 1024 / 1024 / 1024).toFixed(1)} GB total`], ['Free Memory', `${(envInfo.system.freeMemory / 1024 / 1024 / 1024).toFixed(1)} GB`]);
    console.log(systemTable.toString());
    // Package Managers
    console.log(chalk.hex('#00d2d3')('\nüì¶ PACKAGE MANAGERS\n'));
    const pmTable = new Table({
        head: [chalk.hex('#00d2d3')('Manager'), chalk.hex('#10ac84')('Status'), chalk.hex('#ffa502')('Version')],
        colWidths: [15, 15, 30],
        style: { head: [], border: ['cyan'] }
    });
    Object.entries(envInfo.packageManagers).forEach(([name, info]) => {
        pmTable.push([
            name,
            info.available ? chalk.green('‚úì Available') : chalk.red('‚úó Not found'),
            info.available ? info.version : info.error
        ]);
    });
    console.log(pmTable.toString());
    // Programming Languages
    console.log(chalk.hex('#00d2d3')('\nüîß PROGRAMMING LANGUAGES\n'));
    const langTable = new Table({
        head: [chalk.hex('#00d2d3')('Language'), chalk.hex('#10ac84')('Status'), chalk.hex('#ffa502')('Version')],
        colWidths: [15, 15, 40],
        style: { head: [], border: ['cyan'] }
    });
    Object.entries(envInfo.languages).forEach(([name, info]) => {
        langTable.push([
            name.charAt(0).toUpperCase() + name.slice(1),
            info.available ? chalk.green('‚úì Available') : chalk.red('‚úó Not found'),
            info.available ? info.version : info.error
        ]);
    });
    console.log(langTable.toString());
    // Git Configuration
    if (envInfo.git.available) {
        console.log(chalk.hex('#00d2d3')('\nüîÄ GIT CONFIGURATION\n'));
        console.log(`${chalk.white('Version:')} ${envInfo.git.version}`);
        console.log(`${chalk.white('User Name:')} ${envInfo.git.userName}`);
        console.log(`${chalk.white('User Email:')} ${envInfo.git.userEmail}`);
    }
}
/**
 * Perform health check and provide recommendations
 */
function performHealthCheck(envInfo) {
    console.log(chalk.hex('#ffa502')('\nüè• HEALTH CHECK RESULTS\n'));
    const recommendations = [];
    // Check Node.js version
    if (envInfo.nodejs.available) {
        const version = parseInt(envInfo.nodejs.version.replace('v', ''));
        if (version < 18) {
            recommendations.push('Consider upgrading Node.js to version 18+ for better performance and security');
        }
    }
    else {
        recommendations.push('Node.js is not available - required for JavaScript/TypeScript development');
    }
    // Check package managers
    const availableManagers = Object.values(envInfo.packageManagers).filter((pm) => pm.available).length;
    if (availableManagers === 0) {
        recommendations.push('No package managers found - install npm, pnpm, or yarn');
    }
    // Check Git configuration
    if (envInfo.git.available) {
        if (envInfo.git.userName === 'Not configured') {
            recommendations.push('Configure Git username: git config --global user.name "Your Name"');
        }
        if (envInfo.git.userEmail === 'Not configured') {
            recommendations.push('Configure Git email: git config --global user.email "your.email@example.com"');
        }
    }
    else {
        recommendations.push('Git is not installed - essential for version control');
    }
    if (recommendations.length === 0) {
        console.log(chalk.green('‚úÖ Environment looks healthy!'));
    }
    else {
        console.log(chalk.yellow('‚ö†Ô∏è  Recommendations:\n'));
        recommendations.forEach((rec, index) => {
            console.log(chalk.gray(`${index + 1}. ${rec}`));
        });
    }
}
